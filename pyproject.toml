[build-system]
requires = ["setuptools>=66.0"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
package-dir = { "" = "src" }

[project]
name = "cats"
dynamic = ["version"]
description = "Simple api cats"
readme = "README.md"
requires-python = ">=3.12"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
]
dependencies = [
    "httpx == 0.27.*",
    "fastapi == 0.115.*",
    "uvicorn == 0.31.*",
    "uvloop == 0.21.*",
    "sqlalchemy == 2.*",
    "alembic == 1.13.*",
    "psycopg[binary] == 3.*",
    "dishka == 1.3.*",
]

[project.optional-dependencies]
test = [
    "pytest",
    "pytest-asyncio",
]
types = [
    "mypy",
]
lint = [
    "cats[types]",
    "ruff",
]
lint_optional = [
    "bandit",
    "semgrep",
    "codespell",
]
lint_full = [
    "cats[lint,lint_optional]",
]
dev = ["cats[test,lint_full]"]
devmin = ["cats[test,lint_optional]"]

[project.urls]
Homepage = "https://github.com/Maclovi/cats"
Documentation = "https://github.com/Maclovi/README.md"
Repository = "https://github.com/Maclovi/cats"
Issues = "https://github.com/Maclovi/cats/issues"


[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "session"
xfail_strict=true
markers = ["container"]
testpaths = ["tests"]
filterwarnings = []

[tool.mypy]
exclude = [".venv"]
python_version = "3.12"
strict = true
pretty = true

no_implicit_optional = true
check_untyped_defs = true
show_error_codes = true
implicit_reexport = true
namespace_packages = true
ignore_missing_imports = true

warn_unused_ignores = false
warn_return_any = true
warn_redundant_casts = true

allow_untyped_calls = true
allow_subclassing_any = true
allow_untyped_decorators = true

disallow_incomplete_defs = true
disallow_any_unimported = false

[tool.ruff]
line-length = 88
fix = true

[tool.ruff.lint]
select = [
    # "D",     # pydocstyle             https://docs.astral.sh/ruff/rules/#pydocstyle-d
    "I",     # isort                  https://docs.astral.sh/ruff/rules/#isort-i
    "E",     # pycodestyle errors     https://docs.astral.sh/ruff/rules/#error-e
    "W",     # pycodestyle warnings   https://docs.astral.sh/ruff/rules/#warning-w
    "F",     # pyflakes               https://docs.astral.sh/ruff/rules/#pyflakes-f
    "B",     # flake8-bugbear         https://docs.astral.sh/ruff/rules/#flake8-bugbear-b
    "Q",     # flake8-quotes          https://docs.astral.sh/ruff/rules/#flake8-quotes-q
    "N",     # pep8-naming            https://docs.astral.sh/ruff/rules/#pep8-naming-n
    "UP",    # pyupgrade              https://docs.astral.sh/ruff/rules/#pyupgrade-up
    "C4",    # flake8-comprehensions  https://docs.astral.sh/ruff/rules/#flake8-comprehensions-c4
    "PT",    # flake8-pytest-style    https://docs.astral.sh/ruff/rules/#flake8-pytest-style-pt
    "PTH",   # flake8-use-pathlib     https://docs.astral.sh/ruff/rules/#flake8-use-pathlib-pth
    "TCH",   # flake8-type-checking   https://docs.astral.sh/ruff/rules/#flake8-type-checking-tch
    "C90",   # mccabe                 https://docs.astral.sh/ruff/rules/#mccabe-c90
    "T20",   # flake8-print           https://docs.astral.sh/ruff/rules/#flake8-print-t20
    "SIM",   # flake8-simplify        https://docs.astral.sh/ruff/rules/#flake8-simplify-sim
    "RUF",   # Ruff-specific rules    https://docs.astral.sh/ruff/rules/#ruff-specific-rules-ruf
    "PERF",  # Perflint               https://docs.astral.sh/ruff/rules/#perflint-perf
    "ASYNC", # flake8-async           https://docs.astral.sh/ruff/rules/#flake8-async-async
]
ignore = [
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true
